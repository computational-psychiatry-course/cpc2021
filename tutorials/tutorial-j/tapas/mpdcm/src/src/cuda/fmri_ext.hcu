/* aponteeduardo@gmail.com */
/* copyright (C) 2015 */


#ifndef FMRI_EXT_H
#define FMRI_EXT_H

#include "mpdcm.hcu"
# ifdef __CUDACC__ 
#include "fmri_kernels.hcu"
# endif


template<class T_Integrator, int T_preloc>
int
cuda_template_kernel(DataArray y, DataArray u, ThetaFmriArray theta,
    PThetaFmri ptheta);

# ifdef __CUDACC__ 

template<class T_Integrator, int T_preloc>
int
cuda_template_kernel(DataArray y, DataArray u, ThetaFmriArray theta,
    PThetaFmri ptheta)
{

    int device;
    cudaGetDevice(&device);

    struct cudaDeviceProp props;
    cudaGetDeviceProperties(&props, device);

    //int num_blocks =
    // min((y.nc * theta.nc * theta.nr + NUM_THREADS - 1)/NUM_THREADS,
    //    NUM_BLOCKS * props.multiProcessorCount);

    int num_blocks = NUM_BLOCKS * props.multiProcessorCount;

    dim3 gthreads(NUM_THREADS, DIM_FMRI_X);
    dim3 gblocks(num_blocks, 1);


    kernel_global<T_Integrator, T_preloc><<<gblocks, gthreads>>>(y, u, theta, ptheta);

    return 0;
}

# endif

int
cuda_fmri_euler(DataArray y, DataArray u, ThetaFmriArray theta,
    PThetaFmri ptheta);

int
cuda_fmri_euler_large(DataArray y, DataArray u, ThetaFmriArray theta,
    PThetaFmri ptheta);

int
cuda_fmri_euler_bilinear(DataArray y, DataArray u, ThetaFmriArray theta,
    PThetaFmri ptheta);

int
cuda_fmri_euler_nonlinear(DataArray y, DataArray u, ThetaFmriArray theta,
    PThetaFmri ptheta);

int
cuda_fmri_rk4(DataArray y, DataArray u, ThetaFmriArray theta,
    PThetaFmri ptheta);

int
cuda_fmri_rk4_bilinear(DataArray y, DataArray u, ThetaFmriArray theta,
    PThetaFmri ptheta);

int
cuda_fmri_std_rk4_bilinear(DataArray y, DataArray u, ThetaFmriArray theta,
    PThetaFmri ptheta);

int
cuda_fmri_std_rk4_nonlinear(DataArray y, DataArray u, ThetaFmriArray theta,
    PThetaFmri ptheta);


int
cuda_fmri_rk4_nonlinear(DataArray y, DataArray u, ThetaFmriArray theta,
    PThetaFmri ptheta);

#endif // FMRI_EXT_H
